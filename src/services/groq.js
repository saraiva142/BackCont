import Groq from 'groq-sdk';

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY
});

export const analyzeFinancialData = async (textData, fileName = '') => {
  try {
    const prompt = `
CONSULTORIA FISCAL E CONT√ÅBIL COMPLETA - ESPECIALISTA PR√ÅTICO

## DADOS DA OPERA√á√ÉO:
${textData}

## SUA MISS√ÉO:
Atue como um CONTADOR S√äNIOR com 20 anos de experi√™ncia. Forne√ßa n√£o apenas c√°lculos, mas ORIENTA√á√ïES PR√ÅTICAS passo a passo.

## FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON V√ÅLIDO):
{
  "operationType": "tipo_detalhado_da_operacao",
  "category": "categoria_contabil",
  "amount": 50000,
  "taxes": {
    "simplesNacional": {
      "valor": 3000,
      "aliquota": "6%", 
      "observacao": "Servi√ßos - Anexo III"
    },
    "lucroPresumido": {
      "irpj": 7500,
      "csll": 4500,
      "pisCofins": 3600,
      "total": 15600
    },
    "melhorRegime": "Simples Nacional",
    "economiaPotencial": "R$ 12.600 em compara√ß√£o com Lucro Presumido"
  },
  "financialAnalysis": {
    "margemLucro": "45%",
    "saudeFinanceira": "boa",
    "riscosIdentificados": ["Concentra√ß√£o em um cliente", "Sazonalidade"],
    "oportunidades": ["Expans√£o para novos mercados", "Otimiza√ß√£o de custos"]
  },
  "documentationGuide": {
    "reciboObrigatorio": true,
    "tipoRecibo": "Recibo de Pagamento Antecipado",
    "notaFiscal": "NFSe de servi√ßo - modelo 55",
    "declaracoes": ["DASN", "DIRF", "DCTF"],
    "prazosImportantes": ["DAS: at√© dia 20 do m√™s seguinte", "DIRF: at√© final de fevereiro"],
    "documentosNecessarios": ["Contrato de presta√ß√£o de servi√ßo", "Comprovante de pagamento", "RPA assinado"]
  },
  "practicalSteps": [
    "1. Emitir Recibo de Pagamento Antecipado imediatamente",
    "2. Registrar como 'Receita Antecipada' no contas a receber", 
    "3. Provisionar 6% para DAS do Simples Nacional",
    "4. Emitir NFSe na data do servi√ßo/presta√ß√£o",
    "5. Manter contrato assinado em arquivo digital"
  ],
  "legalObligations": [
    "‚ö†Ô∏è Obrigat√≥rio: Emitir recibo para valores acima de R$ 5.000",
    "üìÖ Prazo: Declarar receita antecipada no m√™s do recebimento",
    "üìã Documenta√ß√£o: Contrato deve conter cl√°usula de adiantamento",
    "üí∏ Multa: At√© 150% do imposto em caso de n√£o declara√ß√£o"
  ],
  "bestPractices": [
    "‚úÖ Sempre emitir recibo mesmo para clientes informais",
    "‚úÖ Separar valor reembols√°vel da receita principal",
    "‚úÖ Manter c√≥pia digital dos documentos por 5 anos",
    "‚úÖ Consultar contador para opera√ß√µes at√≠picas"
  ],
  "strategicInsights": [
    "üí∞ Economia fiscal de 12% com Simples Nacional vs Lucro Presumido",
    "üìä Considerar adiantamento como empr√©stimo se servi√ßo for cancelado",
    "üõ°Ô∏è Criar reserva t√©cnica de 10% para impostos surpresa"
  ],
  "alerts": [
    "üö® VALOR SUPERIOR A R$ 5.000: Obrigat√≥rio recibo e documenta√ß√£o",
    "üìÖ PR√ìXIMO PRAZO: DAS at√© dia 20 do m√™s seguinte",
    "‚ö†Ô∏è ATEN√á√ÉO: Receita antecipada tem tratamento cont√°bil espec√≠fico"
  ],
  "monthlySummary": "Opera√ß√£o de recebimento antecipado requer cuidados especiais com documenta√ß√£o. Economia significativa com Simples Nacional.",
  "title": "Consultoria Completa - Recebimento Antecipado"
}

## ORIENTA√á√ïES ESPEC√çFICAS POR TIPO DE OPERA√á√ÉO:

### üìù PARA SERVI√áOS PRESTADOS:
- Quando emitir recibo: SEMPRE que houver transfer√™ncia
- Tipo de nota fiscal: NFSe (Nota Fiscal de Servi√ßo)
- Declara√ß√µes: DASN mensal, DIRF anual
- Cuidados: Separar ISS municipal de outros impostos

### üí∞ PARA VENDAS DE PRODUTOS:
- Documento: NFC-e ou NFe
- Regime: ICMS estadual + impostos federais
- Obriga√ß√µes: EFD Contribui√ß√µes, SPED Fiscal

### üåç PARA OPERA√á√ïES INTERNACIONAIS:
- Documenta√ß√£o: Contrato em ingl√™s, invoice
- Impostos: IOF, IRRF, cambial
- Declara√ß√µes: SISCOMEX, EFD-ICMS/IPI

### üè¶ PARA ADIANTAMENTOS:
- Tratamento: Receita antecipada (retific√°vel)
- Provis√£o: Impostos sobre valor total
- Cuidado: Reembolsos s√£o despesas, n√£o redu√ß√£o de receita

Baseado nos dados fornecidos, retorne APENAS o JSON v√°lido com orienta√ß√µes PR√ÅTICAS e ACION√ÅVEIS.
`;

    console.log('ü§ñ Enviando para consultoria fiscal da Groq...');
    const completion = await groq.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `Voc√™ √© um contador s√™nior especializado em orienta√ß√µes pr√°ticas fiscais e cont√°beis. 
          Forne√ßa instru√ß√µes PASSO A PASSO sobre documenta√ß√£o, recibos, declara√ß√µes e obriga√ß√µes legais.
          Seja PR√ÅTICO e ESPEC√çFICO como se estivesse orientando um cliente.`
        },
        {
          role: "user",
          content: prompt
        }
      ],
      model: "llama-3.1-8b-instant",
      temperature: 0.4,
      max_tokens: 3072,
      top_p: 0.9
    });

    const response = completion.choices[0]?.message?.content;
    console.log('üì® Resposta da consultoria:', response);

    // Parser robusto
    let parsedResponse;
    try {
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsedResponse = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('JSON n√£o encontrado na resposta');
      }
    } catch (parseError) {
      console.error('‚ùå Erro ao parsear JSON:', parseError.message);
      throw new Error('Resposta da IA em formato inv√°lido: ' + parseError.message);
    }

    console.log('‚úÖ Consultoria fiscal parseada com sucesso');
    return parsedResponse;

  } catch (error) {
    console.error('‚ùå Error analyzing with Groq:', error.message);
    return getEnhancedFallbackAnalysis(textData, fileName);
  }
};

// Fallback com orienta√ß√µes b√°sicas
const getEnhancedFallbackAnalysis = (textData, fileName) => {
  const amount = extractAmountFromText(textData);
  
  return {
    operationType: "An√°lise Fiscal Detalhada",
    category: "Consultoria Cont√°bil",
    amount: amount,
    taxes: {
      simplesNacional: {
        valor: amount * 0.06,
        aliquota: "6%",
        observacao: "Servi√ßos - Anexo III"
      },
      lucroPresumido: {
        irpj: amount * 0.15,
        csll: amount * 0.09,
        pisCofins: amount * 0.085,
        total: amount * 0.325
      },
      melhorRegime: "Simples Nacional",
      economiaPotencial: `R$ ${(amount * 0.265).toFixed(2)} em economia fiscal`
    },
    documentationGuide: {
      reciboObrigatorio: amount > 5000,
      tipoRecibo: "Recibo de Pagamento para Servi√ßos",
      notaFiscal: "NFSe - Nota Fiscal de Servi√ßo",
      declaracoes: ["DASN", "DIRF"],
      prazosImportantes: ["DAS: at√© dia 20 todo m√™s"],
      documentosNecessarios: ["Contrato", "Comprovante", "Recibo"]
    },
    practicalSteps: [
      "1. Configure GROQ_API_KEY para orienta√ß√µes espec√≠ficas",
      "2. Consulte um contador para documenta√ß√£o exata",
      "3. Mantenha todos os recibos e comprovantes"
    ],
    legalObligations: [
      "‚ö†Ô∏è Configure a API para detalhes de obriga√ß√µes legais",
      "üìÖ Prazos fiscais variam por tipo de empresa"
    ],
    bestPractices: [
      "‚úÖ Sempre emitir recibos para qualquer valor",
      "‚úÖ Manter documenta√ß√£o organizada por 5 anos",
      "‚úÖ Consultar especialista para d√∫vidas espec√≠ficas"
    ],
    strategicInsights: [
      "üöÄ Configure GROQ_API_KEY para insights personalizados",
      "üí∞ Economia fiscal dispon√≠vel com regime correto",
      "üìä An√°lise completa com orienta√ß√µes pr√°ticas"
    ],
    alerts: [
      "‚ö†Ô∏è Configure GROQ_API_KEY para alertas espec√≠ficos",
      "üìÖ Orienta√ß√µes detalhadas dispon√≠veis ap√≥s configura√ß√£o"
    ],
    monthlySummary: "Consultoria fiscal completa dispon√≠vel ap√≥s configura√ß√£o da API Groq.",
    title: "Orienta√ß√£o Fiscal - " + (fileName || "Dados Fornecidos")
  };
};

// Fun√ß√£o para extrair valores do texto
const extractAmountFromText = (text) => {
  // Procura por padr√µes com R$
  const brlMatch = text.match(/R\$\s*(\d+[.,]\d+|\d+)/);
  if (brlMatch) {
    return parseFloat(brlMatch[1].replace(',', '.').replace('.', ''));
  }
  
  // Procura por n√∫meros grandes (provavelmente valores)
  const numberMatch = text.match(/(\d+[.,]\d+|\d+)\s*(mil|milh√µes|mi|mi|k)/i);
  if (numberMatch) {
    let value = parseFloat(numberMatch[1].replace(',', '.').replace('.', ''));
    if (numberMatch[2] && numberMatch[2].toLowerCase().includes('mil')) {
      value *= 1000;
    }
    return value;
  }
  
  // Procura por qualquer n√∫mero grande
  const largeNumberMatch = text.match(/\b(\d{4,})\b/);
  if (largeNumberMatch) {
    return parseFloat(largeNumberMatch[1]);
  }
  
  return 1000; // Valor padr√£o
};

export const answerFinancialQuestion = async (question, userHistory) => {
  try {
    const prompt = `
## PERGUNTA DO USU√ÅRIO:
${question}

## HIST√ìRICO DO USU√ÅRIO (√∫ltimas 10 an√°lises):
${JSON.stringify(userHistory.slice(0, 10), null, 2)}

## SUA RESPOSTA:
Forne√ßa uma an√°lise estrat√©gica baseada no hist√≥rico. Seja espec√≠fico, use n√∫meros concretos e d√™ recomenda√ß√µes acion√°veis.

Formate a resposta em par√°grafos claros com emojis para melhor legibilidade.
`;

    const completion = await groq.chat.completions.create({
      messages: [
        {
          role: "system",
          content: "Voc√™ √© um consultor financeiro especializado em an√°lise de dados cont√°beis. Seja pr√°tico e baseie-se apenas nos dados fornecidos."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      model: "llama-3.1-8b-instant",
      temperature: 0.4,
      max_tokens: 1024
    });

    return completion.choices[0]?.message?.content;
  } catch (error) {
    console.error('Error answering question:', error);
    return "üöÄ **CONSULTORIA AVAN√áADA**\n\nPara receber an√°lises estrat√©gicas detalhadas, configure a GROQ_API_KEY corretamente.\n\n**Pr√≥ximos passos:**\n1. Verifique se a chave da Groq est√° correta no arquivo .env\n2. Reinicie o servidor backend\n3. Teste novamente a an√°lise";
  }
};